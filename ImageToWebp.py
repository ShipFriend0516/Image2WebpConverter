# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'imgconverter.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import platform
import subprocess
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *


def is_macos():
    system_info = platform.system()
    return system_info == "Darwin"

# exe 파일에서 실행될 경우의 상대경로로 설정
if(is_macos()):
    print('이 운영체제는 맥입니다.')
    cwebp_path = os.path.join(os.path.dirname(__file__), 'cwebp')
else:
    print('이 운영체제는 윈도우입니다.')
    cwebp_path = os.path.join(os.path.dirname(__file__), 'cwebp.exe')

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        #아래는 Qt Designer로 만든 UI 정보
        Dialog.setObjectName("Dialog")
        Dialog.setFixedSize(500,350)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(247, 241, 229))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(247, 241, 229))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(247, 241, 229))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(247, 241, 229))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        Dialog.setPalette(palette)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        Dialog.setAutoFillBackground(False)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(Dialog)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(45, 52, 52))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(45, 52, 52))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        self.label.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("G마켓 산스 TTF Bold")
        font.setPointSize(48)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setToolTip("")
        self.label.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.frame = QtWidgets.QFrame(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setAcceptDrops(True)
        self.frame.setAutoFillBackground(False)
        self.frame.setStyleSheet("border: 0.5px solid gray;")
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setObjectName("verticalLayout")
        #PUSHBUTTON
        self.pushButton = QtWidgets.QPushButton(self.frame)
        font = QtGui.QFont()
        font.setFamily("G마켓 산스 TTF Light")
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))
        self.pushButton.setStyleSheet("border: 0;\n"
"background-color: rgb(0,0,0,0);\n"
"padding: 50%;")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.convert_image)

        self.verticalLayout.addWidget(self.pushButton)
        self.verticalLayout_2.addWidget(self.frame)

        #progressBar
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setAcceptDrops(False)
        self.progressBar.setAutoFillBackground(False)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(False)
        self.progressBar.setInvertedAppearance(False)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_2.addWidget(self.progressBar)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "이미지 변환기"))
        self.label.setText(_translate("Dialog", "이미지 변환기"))
        self.pushButton.setText(_translate("Dialog", "클락하여 파일 추가"))

    # 이미지 파일을 WEBP로 변환하는 함수
    def convert_image(self):
        # 파일 대화상자 열기
        file_dialog = QFileDialog(Dialog, "이미지 파일 선택",os.path.expanduser("~/Downloads"))
        file_dialog.setNameFilters(["이미지 파일 (*.jpg *.jpeg *.png *.gif)","All Files (*)"])
        file_dialog.setFileMode(QFileDialog.ExistingFiles)
        if file_dialog.exec_() == QFileDialog.Accepted:
            filenames = file_dialog.selectedFiles()
        else:
            return

        # 변환 옵션 선택
        option = " -q 75"
        image_files = []
        unsupported_files = []
        progressNum = 1 # 프로그레스 바의 진행도

        for filename in filenames:
            # 이미지 파일인 경우 이미지 파일 리스트에 추가
            if os.path.splitext(filename)[1].lower() in ('.jpg', '.jpeg', '.png', '.gif'):
                image_files.append(filename)
            else:
                # 이미지 파일이 아닌 경우 지원하지 않는 파일 리스트에 추가
                unsupported_files.append(filename)

        #프로그레스바 최대치를 이미지 파일 수로 설정
        self.progressBar.setMaximum(len(image_files))

        # 이미지 파일이 없을 경우 경고 메시지 출력
        if not image_files:
            self.pushButton.setText("선택된 파일에 이미지 파일이 없습니다.")
        else: # 이미지 파일이 존재할 경우 변환을 시작함
            for filename in image_files:
                output_filename = self.makeFolder(filename)
                if os.path.splitext(filename)[1].lower() == '.gif':
                    command = f'"{cwebp_path}" "{filename}" {option} -o {output_filename}'
                else:
                    command = f'"{cwebp_path}" "{filename}" {option} -o {output_filename}'
                # 변환 완료 후 프로그레스바 수치 + 1
                progressNum += 1
                self.progressBar.setValue(progressNum)

                subprocess.call(command, shell=True)


            # 변환 결과 출력
            if len(image_files) == 1:
                self.pushButton.setText(f"{os.path.basename(output_filename)[:-1]}으로 변환되었습니다.")
            else:
                self.pushButton.setText(f"선택한 파일들이 모두 변환되었습니다.\n"
                                        f"성공:{len(image_files)}개 실패:{len(unsupported_files)}개")

    def makeFolder(self, filename):
        # 작업을 완료한 뒤 폴더를 생성해서 그 곳에 완성물을 저장하기 위한 함수
        # 폴더가 없다면 만들고, 있다면 넘어감
        folderName = "변환된 이미지"
        output_directory = os.path.join(os.path.dirname(filename), folderName)
        try:
            os.mkdir(output_directory)
        except FileExistsError:
            pass

        output_filename = os.path.join(output_directory, os.path.basename(filename))
        output_filename = '"' + os.path.splitext(output_filename)[0] + '.webp' + '"'
        return output_filename


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
